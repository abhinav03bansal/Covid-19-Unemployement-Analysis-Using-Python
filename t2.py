# -*- coding: utf-8 -*-
"""T2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f40-ia2EKE45IlkTV05fSBWPla5OWuCL

# ***Covid-19 Unemployement Analysis***
"""

import datetime as dt
import calendar
import pandas as pd
df=pd.read_csv("T2.csv")
df.head()

"""# ***Pre-Processing of Data***"""

df.info()

df.describe()

df.isnull().sum()

print(df.shape)

df=df.dropna()

print(df.shape)

df.columns = ['States', 'Date', 'Frequency', 'Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate', 'Region']
df['Date']=pd.to_datetime(df['Date'],dayfirst=True)
df['year_month']=df['Date'].dt.to_period('M')
#maximum unemployement rate every month
def max_un_mon():
  grouped=df.groupby('year_month')
  results=[]
  for name,group in grouped:
    max_row=group.loc[group['Estimated Unemployment Rate'].idxmax()]
    state=max_row['States']
    results.append((name,state))
  result_df={}
  for period, state in results:
    if not isinstance(period, str):
        period = str(period)
    result_df[period] = state
  return result_df
max_un_mon()

# max unemployemnt state of all time
def max_un_st():
  max_row=df.loc[df['Estimated Unemployment Rate'].idxmax()]
  return max_row['States']
max_un_st()

# min unemployemnt state of all time
def min_un_st():
  min_row=df.loc[df['Estimated Unemployment Rate'].idxmin()]
  return min_row['States']

min_un_st()

#LabourPartRate
#max
def max_lpr():
  max_row=df.loc[df['Estimated Labour Participation Rate'].idxmax()]
  return max_row['States']

#min
def min_lpr():
  min_row=df.loc[df['Estimated Labour Participation Rate'].idxmin()]
  return min_row['States']

max_lpr()
min_lpr()


# Convert the 'Frequency' column to a categorical data type
df['Frequency'] = df['Frequency'].astype('category')

# Convert the 'Region' column to a categorical data type
df['Region'] = df['Region'].astype('category')


# Convert the 'Date' column to datetime format, specifying 'dayfirst' to handle date formats with day first
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)

# Extract the month from the 'Date' column and create a new 'Month' column
df['Month'] = df['Date'].dt.month

# Create a new 'Month_int' column by converting the 'Month' column to integers, handling missing values
df['Month_int'] = df['Month'].apply(lambda x: int(x) if pd.notna(x) else x)


# Drop the 'Month' column from the DataFrame
df.drop(columns='Month', inplace=True)


# Lets create a copy of the dataset for the data of during lockdown period
df_ld = df.copy()


# Drop all the missing values from 'df' dataset
df=df.dropna()


# Define a date range mask to filter rows where 'Date' falls within the range of before lockdown period
mask = (df['Date'] >= '2019-05-31') & (df['Date'] <= '2020-03-31')

# Use the mask to select and keep only the rows that meet the date range criteria
df = df.loc[mask]


# Define a date range mask to filter rows where 'Date' falls within the range of during lockdown period
mask = (df_ld['Date'] >= '2020-04-30')

# Use the mask to select and keep only the rows that meet the date range criteria
df_ld = df_ld.loc[mask]

"""# ***Data Visualization***"""

import matplotlib.pyplot as plt
import seaborn as sns
# Chart - 1 Bar plot visualization code for Region wise Estimated Unemployment Rate before and during lockdown
def urb_vs_urd_r():
  # Create a figure with two subplots side by side.
  plt.figure(figsize=(14, 5))

  # Subplot 1: Estimated Unemployment Rate Before Lockdown
  plt.subplot(1, 2, 1)

  # Create a bar plot using Seaborn to visualize the Estimated Unemployment Rate before lockdown.
  sns.barplot(x='Region', y='Estimated Unemployment Rate', data=df)

  # Set labels and title for the first subplot.
  plt.xlabel("Region", fontsize=10)
  plt.ylabel('Estimated Unemployment Rate', fontsize=10)
  plt.title('Estimated Unemployment Rate Before Lockdown', fontsize=12)

  # Subplot 2: Estimated Unemployment Rate During Lockdown
  plt.subplot(1, 2, 2)

  # Create a bar plot for the Estimated Unemployment Rate during lockdown.
  sns.barplot(x='Region', y='Estimated Unemployment Rate', data=df_ld)

  # Set labels and title for the second subplot.
  plt.xlabel("Region", fontsize=10)
  plt.ylabel('Estimated Unemployment Rate', fontsize=10)
  plt.title('Estimated Unemployment Rate During Lockdown', fontsize=12)

  # Display the subplots side by side.
  plt.show()

urb_vs_urd_r()

# Create a figure with two subplots side by side.
def urb_vs_urd_s():
  plt.figure(figsize=(25, 8))

  # Subplot 1: Estimated Unemployment Rate Before Lockdown
  plt.subplot(1, 2, 1)

  # Set the title for the first subplot.
  plt.title("Estimated Unemployment Rate Before Lockdown", fontsize=16)

  # Create a bar plot to visualize the Estimated Unemployment Rate before lockdown.
  sns.barplot(data=df.sort_values(by='Estimated Unemployment Rate', ascending=False), x="States", y="Estimated Unemployment Rate")
  plt.xticks(rotation=90)
  plt.xlabel('States', fontsize=16)
  plt.ylabel('Estimated Unemployment Rate', fontsize=16)

  # Subplot 2: Estimated Unemployment Rate During Lockdown
  plt.subplot(1, 2, 2)

  # Set the title for the second subplot.
  plt.title("Estimated Unemployment Rate During Lockdown", fontsize=16)

  # Create a bar plot to visualize the Estimated Unemployment Rate during lockdown.
  sns.barplot(data=df_ld.sort_values(by='Estimated Unemployment Rate', ascending=False), x="States", y="Estimated Unemployment Rate")
  plt.xticks(rotation=90)
  plt.xlabel('States', fontsize=16)
  plt.ylabel('Estimated Unemployment Rate', fontsize=16)

  # Display the subplots side by side.
  plt.show()

urb_vs_urd_s()

# Create a figure with two subplots side by side.
def ewb_vs_ewd_s():
  plt.figure(figsize=(25, 8))

  # Subplot 1: Estimated Employed Workforce Before Lockdown
  plt.subplot(1, 2, 1)

  # Set the title for the first subplot.
  plt.title("Estimated Employed Workforce Before Lockdown", fontsize=16)

  # Create a bar plot to visualize the Estimated Employed Workforce before lockdown.
  sns.barplot(data=df.sort_values(by='Estimated Employed', ascending=False), x="States", y="Estimated Employed")

  # Rotate x-axis labels for better readability.
  plt.xticks(rotation=90)

  # Set labels for the first subplot.
  plt.xlabel('States', fontsize=16)
  plt.ylabel('Estimated Employed', fontsize=16)

  # Subplot 2: Estimated Employed Workforce During Lockdown
  plt.subplot(1, 2, 2)

  # Set the title for the second subplot.
  plt.title("Estimated Employed Workforce During Lockdown", fontsize=16)

  # Create a bar plot to visualize the Estimated Employed Workforce during lockdown.
  sns.barplot(data=df_ld.sort_values(by='Estimated Employed', ascending=False), x="States", y="Estimated Employed")

  # Rotate x-axis labels for better readability.
  plt.xticks(rotation=90)

  # Set labels for the second subplot.
  plt.xlabel('States', fontsize=16)
  plt.ylabel('Estimated Employed', fontsize=16)

  # Display the subplots side by side.
  plt.show()

ewb_vs_ewd_s()